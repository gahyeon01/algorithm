(1)배열과 리스트
배열은 메모리의 연속 공간에 값이 채워져 있느 형태의 자료구조
배열의 값은 인덱스를 통해 참조할 수 있으며, 선언한 자료형의 값만 저장할 수 있음.
-배열의 특징
1) 인덱스를 사용하여 값에 바로 접근할 수 있다.
2) 새로운 값을 삽입하거나 특정 인덱스에 있는 값을 삭제하기 어렵다. 값을 삽입하거나 삭제하려면
   해당 인덱스 주변에 있는 값을 이동시키는 과정이 필요하다.
   [1][2][3][4] -> [1][3][4]이런식이 불가능
3) 배열의 크기는 선언할 때 지정할 수 있으며, 한 번 선언하면 크기를 늘리거나 줄일 수 없다.
   예) A[10]
4) 구조가 간단하므로 코딩 테스트에서 많이 사용한다.

리스트는 값과 포인터를 묶은 노드라는 것을 포인터로 연결한 자료구조.
즉, 값과 다음 값(노드)이 무엇인지 가리키는 포인터

-리스트의 특징
1) 인덱스가 없으므로 값에 접근하려면 Head포인터부터 순서대로 접근해야 한다. 다시 말해 값에
   접근하는 속도가 느리다.
2) 포인터로 연결되어 있으므로 데이터를 삽입하거나 삭제하는 연산 속도가 빠르다.
3) 선언할 때 크기를 별도로 지정하지 않아도 된다. 다시 말해 리스트의 크기는 정해져 있지 않으며,
   크기가 변하기 쉬운 데이터를 다룰 때 적절하다.
4) 포인터를 저장할 공간이 필요하므로 배열보다 구조가 복잡하다.

(2) 구간합
구간합이란 합 배열을 이용하여 시간 복잡도를 더 줄이기 위해 사용하는 특수한 목적의 알고리즘.
합 배열 S의 정의
S[i] = A[0] + A[1] + A[2] + ... + A[i-1] + A[i] // A[0]부터 A[i]까지의 합

합 배열 S를 만드는 공식
S[i] = S[i-1] + A[i]

그렇다면, 한 배열에 대하여 i에서 j까지의 구간합을 구하고 싶다면?
구간합을 구하는 공식-> S[j] - S[i-1]

